# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Article {
  id: ID!
  slug: String!
  title: String!
  description: String!
  body: String!
  tagList: [String]!
  createdAt: DateTime!
  updatedAt: DateTime!
  favoritesCount: Int!
  author: Profile!
  favorited: Boolean!
}

type ArticlesResponse {
  articles: [Article]!
  totalItems: Int!
  totalPages: Int!
}

type Comment {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  body: String!
  author: Profile!
  article: Article!
}

# The javascript `Date` as string. Type represents date and time as the ISO Date string.
scalar DateTime

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  follow(follow: Boolean!, username: String!): Profile
  register(input: RegisterInput!): User!
  login(input: LoginInput!): User!
  updateProfile(input: UpdateInput!): User!
  addArticle(title: String!, description: String!, body: String!, tagList: [String!] = []): Article
  favorite(favorite: Boolean!, slug: String!): Article
  updateArticle(slug: String!, title: String, description: String, body: String): Article
  deleteArticle(slug: String!): ResponseStatus!
  addComment(body: String!, slug: String!): Comment
  deleteComment(id: String!): ResponseStatus!
}

type Profile {
  id: ID!
  username: String!
  bio: String!
  image: String!
  articles: [Article]!
  following: Boolean!
}

type Query {
  profile(username: String!): Profile
  user: User
  article(slug: String!): Article
  articles(limit: Int = 20, offset: Int = 0, author: String, favorited: String, tag: String): ArticlesResponse!
  feed(limit: Int = 20, offset: Int = 0): ArticlesResponse!
  tags: [String]!
  comments(slug: String!): [Comment]!
}

input RegisterInput {
  email: String!
  password: String!
  username: String!
}

type ResponseStatus {
  success: Boolean!
}

input UpdateInput {
  email: String
  password: String
  username: String
  bio: String
  image: String
}

type User {
  id: ID!
  username: String!
  bio: String!
  image: String!
  articles: [Article]!
  email: String!
  token: String
}
